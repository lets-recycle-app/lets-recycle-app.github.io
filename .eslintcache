[{"C:\\xampp\\htdocs\\lets_recycle_app\\src\\App.js":"1","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\App.js":"2","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\index.js":"3","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\FormReport\\FormReport.js":"4","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\Header\\Header.js":"5","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\PageContentLanding\\PageContentLanding.js":"6","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\Sidebar\\Sidebar.js":"7","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\Footer\\Footer.js":"8","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\DriversListItem\\DriversListItem.js":"9","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\PageDriversList\\PageDriversList.js":"10","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\reportWebVitals.js":"11","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\SidebarAdmin\\SidebarAdmin.js":"12","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\HeaderAdmin\\HeaderAdmin.js":"13"},{"size":528,"mtime":1607776601640,"results":"14","hashOfConfig":"15"},{"size":2181,"mtime":1609859291273,"results":"16","hashOfConfig":"17"},{"size":500,"mtime":1608134380000,"results":"18","hashOfConfig":"17"},{"size":10602,"mtime":1609783008959,"results":"19","hashOfConfig":"17"},{"size":815,"mtime":1609799748454,"results":"20","hashOfConfig":"17"},{"size":499,"mtime":1608664838517,"results":"21","hashOfConfig":"17"},{"size":853,"mtime":1608134380000,"results":"22","hashOfConfig":"17"},{"size":210,"mtime":1608134380000,"results":"23","hashOfConfig":"17"},{"size":807,"mtime":1609761071797,"results":"24","hashOfConfig":"17"},{"size":2193,"mtime":1609761005531,"results":"25","hashOfConfig":"17"},{"size":362,"mtime":1608134380000,"results":"26","hashOfConfig":"17"},{"size":581,"mtime":1609799595059,"results":"27","hashOfConfig":"17"},{"size":334,"mtime":1609798545859,"results":"28","hashOfConfig":"17"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2fczbc",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l9mzta",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\xampp\\htdocs\\lets_recycle_app\\src\\App.js",[],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\App.js",[],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\index.js",[],["61","62"],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\FormReport\\FormReport.js",["63"],"import \"./FormReport.css\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction FormReport() {\n  const [locationType, setLocationType] = useState({ value: \"\" });\n  const [inputName, setInputName] = useState({ value: \"\" });\n  const [inputEmail, setInputEmail] = useState({ value: \"\" });\n  const [inputAppliance, setInputAppliance] = useState({ value: \"\" });\n  const [inputHouseNo, setInputHouseNo] = useState({ value: \"\" });\n  const [inputStreet, setInputStreet] = useState({ value: \"\" });\n  const [inputTown, setInputTown] = useState({ value: \"\" });\n  const [inputPostcode, setInputPostcode] = useState({ value: \"\" });\n  const [inputNotes, setInputNotes] = useState({ value: \"\" });\n  const [messageOnSubmit, setMessageOnSubmit] = useState({msg: []});\n\n  /* do this on submission??? */\n  const handleRadioPublic = e => {\n    setLocationType({ value: e.target.value });\n    setInputName({ value: \"\" });\n    setInputEmail({ value: \"\" });\n  }\n\n  const lookupPostcode = async (code) => {\n    const postcodes = require('node-postcodes.io');\n    const result = await postcodes.lookup(code);\n    return result;\n  }\n\n  const validateForm = e => {\n    let errorMsg = [];\n    //console.log(locationType, inputName, inputEmail, inputAppliance, inputHouseNo,inputStreet, inputTown, inputPostcode, inputNotes);\n    if (locationType.value === \"\") {\n      errorMsg.push(\"Please select Location Type\");\n      setLocationType({ value: \"\", css: \"textRed\" });\n    }\n    if (locationType.value === \"private property\") {\n      if (inputName.value === \"\") {\n        errorMsg.push(\"Please enter your forename and surname.\");\n        setInputName({ value: \"\", css: \"borderRed\" });\n      }\n      var validator = require(\"email-validator\");\n      if (inputEmail.value === \"\" || validator.validate(inputEmail.value) !== true) {\n        errorMsg.push(\"Please enter a valid email.\");\n        setInputEmail({ value: inputEmail.value, css: \"borderRed\" });\n      }\n    }\n    if (inputAppliance.value === \"\") {\n      errorMsg.push(\"Please select appliance type.\");\n      setInputAppliance({ value: \"\", css: \"borderRed\" });\n    }\n    if (inputHouseNo.value === \"\") {\n      errorMsg.push(\"Please enter house/building number.\");\n      setInputHouseNo({ value: \"\", css: \"borderRed\" });\n    }\n    if (inputStreet.value === \"\") {\n      errorMsg.push(\"Please enter street.\");\n      setInputStreet({ value: \"\", css: \"borderRed\" });\n    }\n    if (inputTown.value === \"\") {\n      errorMsg.push(\"Please enter town or city.\");\n      setInputTown({ value: \"\", css: \"borderRed\" });\n    }\n    if (inputPostcode.value === \"\") {\n      errorMsg.push(\"Please enter postcode.\");\n      setInputPostcode({ value: \"\", css: \"borderRed\" });\n    } \n/*     else {\n      //function above returns a promise, I deal with it here\n      lookupPostcode(inputPostcode.value)\n      .then(result => {\n          //console.log('result= ', result);\n        if(result.status !== 200){\n          errorMsg.push(\"Please enter a correct UK postcode.\");\n          setInputPostcode({ value: inputPostcode.value, css: \"borderRed\" });\n          return errorMsg;\n        }\n      });\n    } */\n    //console.log(errorMsg);\n    return errorMsg;\n  }\n\n  const submitForm = e => {\n    e.preventDefault();\n    let validation = validateForm(e);\n    //there was an error\n    if (validation.length > 0) {\n      setMessageOnSubmit({msg: validation, css: \"errorMsg\"});\n    } else {\n      let collectionId = uuidv4();\n\n      let strCollection = (locationType.value === \"private property\" ? \"Your collection ID is: \" + collectionId + \". Please keep it to manage your collection.\" : \"\");\n\n      setMessageOnSubmit({msg: [\"Your request was sent. \" + strCollection], css: \"successMsg\"});\n      //console.log('success');\n      //function above returns a promise, I deal with it here\n/*       lookupPostcode(inputPostcode.value)\n      .then(result => {\n       // console.log('result= ', result);\n        if(result.status === 200){\n          setInputPostcode({ \n            value: inputPostcode.value, \n            css: \"\", \n            long: result.result.longitude,\n            lat: result.result.latitude\n          });\n        } \n      });*/\n\n      let now = new Date().toISOString().substring(0, 19).replace(\"T\", \" \");\n      const collectionRequest = {\n        id: collectionId,\n        datetime: now,\n        locationType: locationType.value,\n        name: inputName.value,\n        email: inputEmail.value,\n        apliance: inputAppliance.value,\n        houseNo: inputHouseNo.value,\n        street: inputStreet.value,\n        town: inputTown.value,\n        postcode: inputPostcode.value,\n        item: inputAppliance.value,\n        notes: inputNotes.value,\n        type: \"collection\",\n/*         longitude: inputPostcode.long,\n        latitude: inputPostcode.lat */\n      };\n     console.log(collectionRequest);\n      let colReq = [];\n      //get storage and turn into array\n      if (localStorage.getItem('colRequest')) {\n        colReq = JSON.parse(localStorage.getItem('colRequest'));\n\n        //localStorage.removeItem('lorem');\n        //localStorage.clear();\n      }\n      //add new object in the array\n        colReq.push(collectionRequest);\n        \n      //save new to storage\n        localStorage.setItem('colRequest', JSON.stringify(colReq));\n\n      //clear the form inputs\n       setLocationType({ value: \"\" });\n       setInputName({ value: \"\" });\n       setInputEmail({ value: \"\" });\n       setInputAppliance({ value: \"\" });\n       setInputHouseNo({ value: \"\" });\n       setInputStreet({ value: \"\" });\n       setInputTown({ value: \"\" });\n       setInputPostcode({ value: \"\" });\n       setInputNotes({ value: \"\" });\n    }\n  }\n\n  //console.log('lorem', messageOnSubmit);\n  return (\n    <form onSubmit={submitForm}>\n      <div className={messageOnSubmit.css}>\n        {messageOnSubmit.msg.map((line, i) => <MsgLine line={line} key={i} />)}\n      </div>\n      <div className=\"form-row\">\n        <label>Type of location</label>\n        <div className={locationType.css} >\n          <div className=\"form-check-inline\">\n            <input\n              type=\"radio\"\n              name=\"locationType\"\n              id=\"inlineRadio1\"\n              onChange={handleRadioPublic}\n              value=\"public area\"\n              checked={locationType.value === \"public area\"}\n            />\n            <label htmlFor=\"inlineRadio1\">Public Area</label>\n          </div>\n          <div className=\"form-check-inline\">\n            <input\n              type=\"radio\"\n              name=\"locationType\"\n              id=\"inlineRadio2\"\n              value=\"private property\"\n              onChange={e => setLocationType({ value: e.target.value })}\n              checked={locationType.value === \"private property\"}\n            />\n            <label htmlFor=\"inlineRadio2\">Private Property </label>\n          </div>\n        </div>\n      </div>\n      <div hidden={locationType.value === \"private property\" ? \"\" : \"hidden\"} >\n        <div className=\"form-row\">\n          <label htmlFor=\"inputName\">Full Name</label>\n          <div>\n            <input\n              type=\"text\"\n              id=\"inputName\"\n              name=\"inputName\"\n              onChange={e => setInputName({ value: e.target.value })}\n              value={inputName.value}\n              className={inputName.css}\n            />\n          </div>\n        </div>\n        <div className=\"form-row\">\n          <label htmlFor=\"email\">Email</label>\n          <div>\n            <input\n              type=\"text\"\n              id=\"inputEmail\"\n              name=\"inputEmail\"\n              onChange={e => setInputEmail({ value: e.target.value })}\n              value={inputEmail.value}\n              className={inputEmail.css}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"form-row\">\n        <label htmlFor=\"inputAppliance\">Appliance Type</label>\n        <div>\n          <select\n            id=\"inputAppliance\"\n            name=\"appliance\"\n            value={inputAppliance.value}\n            className={inputAppliance.css}\n            onChange={e => setInputAppliance({ value: e.target.value })}\n          >\n            <option value=\"\">Select...</option>\n            <option value=\"washing machine\">Washing Machine</option>\n            <option value=\"fridge\">Fridge</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"form-row\">\n        <label htmlFor=\"inputHouseNo\">House/Building No</label>\n        <div>\n          <input\n            type=\"text\"\n            id=\"inputHouseNo\"\n            value={inputHouseNo.value}\n            className={inputHouseNo.css}\n            onChange={e => setInputHouseNo({ value: e.target.value })}\n          />\n        </div>\n      </div>\n      <div className=\"form-row\">\n        <label htmlFor=\"inputStreet\">Street</label>\n        <div>\n          <input\n            type=\"text\"\n            id=\"inputStreet\"\n            value={inputStreet.value}\n            className={inputStreet.css}\n            onChange={e => setInputStreet({ value: e.target.value })}\n          />\n        </div>\n      </div>\n      <div className=\"form-row\">\n        <label htmlFor=\"inputTown\">Town/City</label>\n        <div>\n          <input\n            type=\"text\"\n            id=\"inputTown\"\n            value={inputTown.value}\n            className={inputTown.css}\n            onChange={e => setInputTown({ value: e.target.value })}\n          />\n        </div>\n      </div>\n      <div className=\"form-row\">\n        <label htmlFor=\"inputPostcode\" >Postcode</label>\n        <div>\n          <input\n            type=\"text\"\n            id=\"inputPostcode\"\n            value={inputPostcode.value}\n            className={inputPostcode.css}\n            onChange={e => setInputPostcode({ value: e.target.value })}\n          />\n        </div>\n      </div>\n      <div className=\"form-row\">\n        <label htmlFor=\"inputNotes\">Notes\n          <br /><small>Please describe location in detail. What is parking situation and access to the appliance?</small>\n        </label>\n        <div className=\"textarea-wrapper\">\n          <textarea\n            id=\"inputNotes\"\n            name=\"inputNotes\"\n            value={inputNotes.value}\n            className={inputNotes.css}\n            onChange={e => setInputNotes({ value: e.target.value })}\n          ></textarea>\n        </div>\n      </div>\n      <div className=\"form-row text-right\">\n        <button type=\"submit\">Submit</button>\n      </div>\n    </form>\n  );\n}\n\nfunction MsgLine(props) {\n  //console.log('aaa', props.msgArray, props.css);\n  return (\n    <span>{props.line}</span>\n  );\n\n}\n\nexport default FormReport;","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\Header\\Header.js",[],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\PageContentLanding\\PageContentLanding.js",[],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\Footer\\Footer.js",[],["64","65"],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\DriversListItem\\DriversListItem.js",[],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\PageDriversList\\PageDriversList.js",["66"],"import {useState} from 'react';\nimport DriversListItem from '../DriversListItem/DriversListItem.js';\n\nfunction PageDriversList() {\n  let storageItems = [];\n  if (localStorage.getItem('colRequest')) {\n      storageItems = JSON.parse(localStorage.getItem('colRequest'));\n      storageItems = storageItems.reverse();\n  }\n  //console.log(storageItems);\n  const hardcodedItems = [\n    {id:1, datetime:\"2020-12-17\", type:\"collection\", completed:true, houseNo:\"123\", street:\"Some St\", town:\"Some Town\", postcode:\"ST1 2AB\", item:\"washing machine\", locationType:\"public area\", notes:\"in the back alley\"},\n    {id:2, datetime:\"2020-12-17\", type:\"collection\", completed:false, houseNo:\"45\", street:\"Some Other St\", town:\"Some Other Town\", postcode:\"ST2 3CD\", item:\"fridge\", locationType:\"private property\", notes:\"\"},\n    {id:3, datetime:\"2020-12-17\", type:\"collection\", completed:false, houseNo:\"67\", street:\"Lorem Ipsum\", town:\"Dolor sit amet\", postcode:\"ABC 123\", item:\"dish washer\", locationType:\"private property\", notes:\"no parking in front\"},\n    {id:4, datetime:\"2020-12-18\", type:\"collection\", completed:false, houseNo:\"89\", street:\"Adipiscing\", town:\"Consectetur\", postcode:\"ABC 123\", item:\"dish washer\", locationType:\"private property\", notes:\"no parking in front\"},\n  ];\n  const allItems = storageItems.concat(hardcodedItems);\n  //console.log(allItems);\n  const [dirversItems, setDriversItems] = useState(allItems);\n\n  //const todaysDriversItems = dirversItems.filter(item => item.datetime === \"2020-12-17\");\n\n    return (\n        <div className=\"main-column\">\n          {/* <h1>Your todays route is listed below.</h1> */}\n          <h1>Latest requests are listed below.</h1>\n          { dirversItems.map(item => \n            <DriversListItem \n            key={item.id}\n            id={item.id}\n            houseNo={item.houseNo} \n            street={item.street} \n            town={item.town} \n            postcode={item.postcode}\n            completed={item.completed}\n            type={item.type}\n            item={item.item}\n            locationType={item.locationType}\n            notes={item.notes}\n            />   \n          )}\n        </div>\n    );\n}\n\nexport default PageDriversList;","C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\reportWebVitals.js",[],["67","68"],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\SidebarAdmin\\SidebarAdmin.js",[],["69","70"],"C:\\xampp\\htdocs\\lets-recycle-app.github.io\\src\\components\\HeaderAdmin\\HeaderAdmin.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":24,"column":9,"nodeType":"77","messageId":"78","endLine":24,"endColumn":23},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","replacedBy":"80"},{"ruleId":"75","severity":1,"message":"81","line":19,"column":24,"nodeType":"77","messageId":"78","endLine":19,"endColumn":39},{"ruleId":"71","replacedBy":"82"},{"ruleId":"73","replacedBy":"83"},{"ruleId":"71","replacedBy":"84"},{"ruleId":"73","replacedBy":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'lookupPostcode' is assigned a value but never used.","Identifier","unusedVar",["86"],["87"],"'setDriversItems' is assigned a value but never used.",["86"],["87"],["86"],["87"],"no-global-assign","no-unsafe-negation"]